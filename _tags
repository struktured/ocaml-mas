# OASIS_START
# DO NOT EDIT (digest: 292d6045ed3d12beaa2591e260d73f98)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library mas_core
"src/core/mas_core.cmxs": use_mas_core
"src/core/gen_ext.cmx": for-pack(Mas_core)
"src/core/sampling_ext.cmx": for-pack(Mas_core)
"src/core/mas_intf.cmx": for-pack(Mas_core)
"src/core/action.cmx": for-pack(Mas_core)
"src/core/mas_system.cmx": for-pack(Mas_core)
"src/core/state.cmx": for-pack(Mas_core)
"src/core/reward_functions.cmx": for-pack(Mas_core)
"src/core/learning_rule.cmx": for-pack(Mas_core)
<src/core/*.ml{,i,y}>: pkg_containers
<src/core/*.ml{,i,y}>: pkg_containers.misc
<src/core/*.ml{,i,y}>: pkg_gen
<src/core/*.ml{,i,y}>: pkg_oml
<src/core/*.ml{,i,y}>: pkg_ppx_deriving
<src/core/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/core/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/core/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/core/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/core/*.ml{,i,y}>: pkg_prob_cache_containers
# Library mas_value_functions
"src/value_functions/mas_value_functions.cmxs": use_mas_value_functions
"src/value_functions/value_function.cmx": for-pack(Mas_value_functions)
"src/value_functions/discrete_value_function.cmx": for-pack(Mas_value_functions)
<src/value_functions/*.ml{,i,y}>: pkg_containers
<src/value_functions/*.ml{,i,y}>: pkg_containers.misc
<src/value_functions/*.ml{,i,y}>: pkg_gen
<src/value_functions/*.ml{,i,y}>: pkg_oml
<src/value_functions/*.ml{,i,y}>: pkg_ppx_deriving
<src/value_functions/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/value_functions/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/value_functions/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/value_functions/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/value_functions/*.ml{,i,y}>: pkg_prob_cache_containers
<src/value_functions/*.ml{,i,y}>: use_mas_core
# Library mas_learning_rules
"src/learning_rules/mas_learning_rules.cmxs": use_mas_learning_rules
"src/learning_rules/one_step_learner.cmx": for-pack(Mas_learning_rules)
"src/learning_rules/q_learner.cmx": for-pack(Mas_learning_rules)
"src/learning_rules/sarsa_learner.cmx": for-pack(Mas_learning_rules)
<src/learning_rules/*.ml{,i,y}>: pkg_containers
<src/learning_rules/*.ml{,i,y}>: pkg_containers.misc
<src/learning_rules/*.ml{,i,y}>: pkg_gen
<src/learning_rules/*.ml{,i,y}>: pkg_oml
<src/learning_rules/*.ml{,i,y}>: pkg_ppx_deriving
<src/learning_rules/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/learning_rules/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/learning_rules/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/learning_rules/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/learning_rules/*.ml{,i,y}>: pkg_prob_cache_containers
<src/learning_rules/*.ml{,i,y}>: use_mas_core
<src/learning_rules/*.ml{,i,y}>: use_mas_value_functions
# Library mas_policies
"src/policies/mas_policies.cmxs": use_mas_policies
"src/policies/random_policy.cmx": for-pack(Mas_policies)
"src/policies/greedy_policy.cmx": for-pack(Mas_policies)
"src/policies/uct_policy.cmx": for-pack(Mas_policies)
"src/policies/softmax_policy.cmx": for-pack(Mas_policies)
"src/policies/state_based_policy.cmx": for-pack(Mas_policies)
<src/policies/*.ml{,i,y}>: pkg_containers
<src/policies/*.ml{,i,y}>: pkg_containers.misc
<src/policies/*.ml{,i,y}>: pkg_gen
<src/policies/*.ml{,i,y}>: pkg_oml
<src/policies/*.ml{,i,y}>: pkg_ppx_deriving
<src/policies/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/policies/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/policies/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/policies/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/policies/*.ml{,i,y}>: pkg_prob_cache_containers
<src/policies/*.ml{,i,y}>: use_mas_core
<src/policies/*.ml{,i,y}>: use_mas_value_functions
# Library mas_agents
"src/agents/mas_agents.cmxs": use_mas_agents
"src/agents/state_based_agent.cmx": for-pack(Mas_agents)
<src/agents/*.ml{,i,y}>: pkg_containers
<src/agents/*.ml{,i,y}>: pkg_containers.misc
<src/agents/*.ml{,i,y}>: pkg_gen
<src/agents/*.ml{,i,y}>: pkg_oml
<src/agents/*.ml{,i,y}>: pkg_ppx_deriving
<src/agents/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/agents/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/agents/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/agents/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/agents/*.ml{,i,y}>: pkg_prob_cache_containers
<src/agents/*.ml{,i,y}>: use_mas_core
<src/agents/*.ml{,i,y}>: use_mas_learning_rules
<src/agents/*.ml{,i,y}>: use_mas_policies
<src/agents/*.ml{,i,y}>: use_mas_value_functions
# Library mas_environments
"src/environments/mas_environments.cmxs": use_mas_environments
"src/environments/two_agent.cmx": for-pack(Mas_environments)
<src/environments/*.ml{,i,y}>: pkg_containers
<src/environments/*.ml{,i,y}>: pkg_containers.misc
<src/environments/*.ml{,i,y}>: pkg_gen
<src/environments/*.ml{,i,y}>: pkg_oml
<src/environments/*.ml{,i,y}>: pkg_ppx_deriving
<src/environments/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/environments/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/environments/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/environments/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/environments/*.ml{,i,y}>: pkg_prob_cache_containers
<src/environments/*.ml{,i,y}>: use_mas_core
<src/environments/*.ml{,i,y}>: use_mas_value_functions
# Library mas_plot
"src/plot/mas_plot.cmxs": use_mas_plot
"src/plot/decorators.cmx": for-pack(Mas_plot)
"src/plot/archimedes_plot.cmx": for-pack(Mas_plot)
<src/plot/*.ml{,i,y}>: pkg_archimedes
<src/plot/*.ml{,i,y}>: pkg_containers
<src/plot/*.ml{,i,y}>: pkg_containers.misc
<src/plot/*.ml{,i,y}>: pkg_gen
<src/plot/*.ml{,i,y}>: pkg_oml
<src/plot/*.ml{,i,y}>: pkg_ppx_deriving
<src/plot/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/plot/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/plot/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/plot/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/plot/*.ml{,i,y}>: pkg_prob_cache_containers
<src/plot/*.ml{,i,y}>: use_mas_agents
<src/plot/*.ml{,i,y}>: use_mas_core
<src/plot/*.ml{,i,y}>: use_mas_environments
<src/plot/*.ml{,i,y}>: use_mas_learning_rules
<src/plot/*.ml{,i,y}>: use_mas_policies
<src/plot/*.ml{,i,y}>: use_mas_value_functions
# Library mas_examples
"src/examples/mas_examples.cmxs": use_mas_examples
"src/examples/narmed_bandit.cmx": for-pack(Mas_examples)
<src/examples/*.ml{,i,y}>: pkg_archimedes
<src/examples/*.ml{,i,y}>: pkg_containers
<src/examples/*.ml{,i,y}>: pkg_containers.misc
<src/examples/*.ml{,i,y}>: pkg_gen
<src/examples/*.ml{,i,y}>: pkg_oml
<src/examples/*.ml{,i,y}>: pkg_ppx_deriving
<src/examples/*.ml{,i,y}>: pkg_ppx_deriving.iter
<src/examples/*.ml{,i,y}>: pkg_ppx_deriving.ord
<src/examples/*.ml{,i,y}>: pkg_ppx_deriving.show
<src/examples/*.ml{,i,y}>: pkg_ppx_deriving_protobuf
<src/examples/*.ml{,i,y}>: pkg_prob_cache_containers
<src/examples/*.ml{,i,y}>: use_mas_agents
<src/examples/*.ml{,i,y}>: use_mas_core
<src/examples/*.ml{,i,y}>: use_mas_environments
<src/examples/*.ml{,i,y}>: use_mas_learning_rules
<src/examples/*.ml{,i,y}>: use_mas_plot
<src/examples/*.ml{,i,y}>: use_mas_policies
<src/examples/*.ml{,i,y}>: use_mas_value_functions
# OASIS_STOP
